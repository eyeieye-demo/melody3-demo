
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" >
<head>
    <title>MelodyDemo</title>
    <link rel="stylesheet" type="text/css" media="all"
          href="script/chat.css" />
</head>
<body th:fragment="screen_content">
<h3>URLBroker介绍：</h3>
<p>URLBroker是一个工具类，会根据对象名自动注入配置文件中配置的地址，一般用于快速获得某一域下的指定链接。</p>
<p>使用URLBroker有两种配置方法，一是在spring-bean的xml文件中进行配置：</p>
<div class="melody-code-wrap">
<pre><code>&lt;bean id=&quot;&lt;ServerBeanName&gt;&quot; class=&quot;com.eyeieye.melody.web.url.URLBroker&quot;&gt;
    &lt;property name=&quot;encoding&quot; value=&quot;&lt;字符编码&gt;&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;config&quot;&gt;
        &lt;bean class=&quot;com.eyeieye.melody.web.url.URLConfig&quot;&gt;
            &lt;property name=&quot;protocol&quot; value=&quot;&lt;protocol&gt;&quot;&gt;&lt;/property&gt;
            &lt;property name=&quot;host&quot; value=&quot;&lt;app.server.host&gt;&quot;&gt;&lt;/property&gt;
            &lt;property name=&quot;port&quot; value=&quot;&lt;app.server.port&gt;&quot;&gt;&lt;/property&gt;
            &lt;property name=&quot;path&quot; value=&quot;&lt;app.server.path&gt;&quot;&gt;&lt;/property&gt;
            &lt;property name=&quot;path&quot; value=&quot;&lt;app.server.path&gt;&quot;&gt;&lt;/property&gt;
            &lt;property name=&quot;followContextPath&quot; value=&quot;true&quot;&gt;&lt;/property&gt;
        &lt;/bean&gt;
    &lt;/property&gt;
&lt;/bean&gt;</code></pre>
</div>

<h3>举例说明：</h3>
<p>&lt;ServerBeanName&gt;是要用到的URLBroker的对象名，如mail服务器的URLBroker对象可以命名为mailServer；</p>
<p>&lt;字符编码&gt;是拼接字符串使用的字符编码，一般使用配置好的全局变量；</p>
<p>&lt;protocol&gt;是链接的协议类型，默认为http；</p>
<p>&lt;app.server.host&gt;是该域的host地址，如mail.myWeb.com；</p>
<p>&lt;app.server.port&gt;是该域的端口，如8080；</p>
<p>&lt;app.server.path&gt;是该域的path路径，如mail；</p>
<p>&lt;key&gt;是注入URLBroker时用到的key，一般与ServerBeanName同名；</p>
<p>以上参数均可使用配置文件进行注入</p>

<br/>
<p>另一中配置方法是使用java配置类：</p>
<p>可参照com.eyeieye.melody.demo.conf.UrlBrokerConfiguration.java这个类中的内容：</p>
<div class="melody-code-wrap"><pre><code>
@Configuration
public class UrlBrokerConfiguration {

    @Autowired
    Environment environment;

    //TODO 留一个,其他的配xml
    @Bean("imageServer")
    public URLBroker imageServer(@Autowired URLBroker appServer){
        URLConfig defaultConfig = appServer.getConfig();
        URLBroker urlBroker = new URLBroker();
        URLConfig urlConfig = new URLConfig();

        urlConfig.setHost(environment.getProperty("imageServer.host",defaultConfig.getHost()));
        urlConfig.setPort(environment.getProperty("imageServer.port",Integer.class,defaultConfig.getPort()));
        urlConfig.setPath(environment.getProperty("imageServer.path",defaultConfig.getPath()));
        urlConfig.setProtocol(environment.getProperty("imageServer.protocol",defaultConfig.getProtocol()));

        urlBroker.setConfig(urlConfig);
        urlBroker.setEncoding("UTF-8");

        return urlBroker;
    }

}
</code></pre></div>
<p>如上述代码样例所示，在一个java配置类中，添加返回类型为URLBroker的bean，bean名为欲配置的urlBroker的名字。<br/>
在bean中，通过URLConfig对象为urlBroker添加相关配置，配置内容同xml配置相同。</p><br/>
<h3>URLBroker的使用：</h3>
<ul>
    <li><span>在页面中使用:</span>
        <div class="maintext">
            <span>①在页面中可以使用${#url.get('&lt;ServerName&gt;','&lt;path&gt;')}引用配置好的URLBroker对象，其返回格式为：ServerHost:ServerPort/ServerPath/path ，如果path为空则相当于获取Server的路径。<br/>例如${#url.get('&lt;testServer&gt;','&lt;testPage.htm&gt;')}的值为:<span th:text="${#url.get('testServer','testPage.htm')}">NoServerFound</span><span style="color: #62001b;font-size: smaller">**本页面中示例所需要的配置内容均可在service-bean.xml中查看。</span></span>
            <span>②使用put和addQueryData可以在链接后增加参数，如${#url.get('testServer','testPage.htm').addQueryData('username','jojo').put('uuid','Ke2Ra')}的值为<span th:text="${#url.get('testServer','testPage.htm').addQueryData('username','jojo').put('uuid','Ke2Ra')}">NotFound</span></span>
            <!--<span>③Melody支持多种视图，包括<a class="m-detail-link1" th:href="${#url.get('appServer','/dir_url/jsppage.jsp')}"
                                             target="_blank">jsp页面</a>。</span>-->
            <!-- TODO: jsp页面无法显示 -->
        </div>
    </li>
    <li><span>在服务器程序使用：</span></li>
        <p>①使用@Autowired可以对URLBroker的引用进行注入，注入内容由引用名确定，如：</p>
    <div class="melody-code-wrap">
<pre><code>@Autowired
private URLBroker mailServer;</code></pre>
    </div>
    <p>②根据同在页面中使用一样，可以通过get方法指定一个链接，使用put和addQueryData方法在链接后增加参数</p>
    <li><span>提示：</span>
        <span>Melody中已经存在appServer的URLBroker对象，故不需要再进行配置</li>
</ul>

</body>
</html>