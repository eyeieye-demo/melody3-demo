<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" es:layout>
<head>
    <title>测试</title>
    <link rel="stylesheet" type="text/css" media="all"
          th:href="script/chat.css"/>
</head>
<body id="dd">
<div name="index" th:fragment="screen_content">
    <p>之前介绍了contain页面时可以用put方法添加参数，但是put方法相当于request.setAttributes()方法，
        这样传入的参数在action中只能用request.getAttributes()取得。本框架不推荐频繁使用request对象，
        所以下面将介绍其他传入参数的方法。</p>

    <details close>
        <summary>
            <h3>基本的入参方式</h3>
        </summary>
        <div style="margin-left: 5%;">
            <li>页面传入的参数param类型的参数可以被action中对应的方法捕捉到，
                与传入参数同名的方法参数或方法中添加了@RequestParam注解的参数会被自动注入传入的参数值。</li>
            <br/>
            <li>在@RequestParam注解中可以添加相关参数为入参配置相关属性，如：</li>
            <p>required = [true, false]：该参数是否可以非空，配置为true时该参数必须有传入值，否则抛出异常</p>
            <p>defaultValue = [value]：该参数的默认值，如果required配置为true，可以使用这个属性防止异常</p>
            <p><a class="m-detail-link"
                  th:href="${#url.get('appServer','/spring/annotation/param/base.htm').addQueryData('name','John')}"
                  target="_blank">点击查看示例</a></p>
        </div>
    </details>
    <details close>
        <summary>
            <h3>传入参数自动绑定到对象属性</h3>
        </summary>
        <div style="margin-left: 5%;">
            <li>在action的方法的入参中，如果有JavaBean类型的参数，且传入参数与JavaBean的成员变量同名同类型，
                则页面传入参数时可以值会直接注入到其对象的成员变量中去。</li>
            <p><a class="m-detail-link" th:href="${#url.get('appServer','/spring/annotation/param/simple_object_bind.htm').addQueryData(
            'name','Jonathan Joestar').addQueryData('nick','JoJo').addQueryData('age','500')}"
                  target="_blank">点击查看示例</a></p>
            <!--  <li>此外，可以使用&#36;springBind方法将表单参数绑定到方法的bean类型参数上去，方法参数前需要添加@ModelAttribute注解</li>
              <p><a class="m-detail-link" th:href="${#url.get('appServer','/spring/annotation/param/spring_object_bind.htm')}" target="_blank">点击查看示例</a></p>
         -->
        </div>
    </details>
    <details close>
        <summary>
            <h3>使用json将参数自动绑定到对象</h3>
        </summary>
        <div style="margin-left: 5%;">
            <li>将参数名和参数值拼接成json发送到服务器，action的方法会自动接收到参数并封装到方法的参数中</li>
            <p><a class="m-detail-link" th:href="${#url.get('appServer','/spring/annotation/param/json_object_bind.htm')}"
                  target="_blank">点击查看示例</a></p>
        </div>
    </details>
    <details close>
        <summary>
            <h3>RESTful传参</h3>
        </summary>
        <div style="margin-left: 5%;">
            <p>RESTful传参方式是将参数放在url中，其作为url的一部分请求服务器。<br/>
                示例：http://127.0.0.1/oauth/[type]/[uuid].htm，其中[type]和[uuid]都是要传入的参数，<br/>
                比如 http://127.0.0.1/oauth/qq/Ude9c3aae.htm，请求该链接时方法会分别接受到qq和Ude9c3aae两个参数值,<br/>
                在服务器上，接收方法的注解@RequestMapping时需要使用如下写法：</p>
            <div class="melody-code-wrap"><pre>
            <code>
                @RequestMapping("/oauth/{type}/{uuid}.htm")
                public String oauth(@PathVariable("type") String type,
                                    @PathVariable("uuid") String uuid, Model model)
            </code>
        </pre>
            </div>
            <p>即，将传入的参数在path中用{}注明，并在方法参数处添加@PathVariable注解。</p>
            <p><a class="m-detail-link" th:href="${#url.get('appServer','/spring/annotation/param/RESTful.htm')}"
                  target="_blank">点击查看示例</a></p>
        </div>
    </details>
    <br/><br/>
</div>
</body>
</html>